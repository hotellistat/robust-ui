{"version":3,"file":"v4.cfbfad87.js","sources":["../../node_modules/uuid-browser/lib/rng-browser.js","../../node_modules/uuid-browser/lib/bytesToUuid.js","../../node_modules/uuid-browser/v4.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = typeof global !== 'undefined' && (global.crypto || global.msCrypto); // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng-browser');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n"],"names":["rng","crypto","global","rnds8","rnds","i","r","rngBrowser","byteToHex","bytesToUuid","buf","offset","bth","bytesToUuid_1","require$$0","require$$1","v4","options","ii","v4_1"],"mappings":"yCAIA,IAAIA,EAEAC,EAAS,OAAOC,EAAW,MAAgBA,EAAO,QAAUA,EAAO,UACvE,GAAID,GAAUA,EAAO,gBAAiB,CAEpC,IAAIE,EAAQ,IAAI,WAAW,EAAE,EAC7BH,EAAM,UAAqB,CACzB,OAAAC,EAAO,gBAAgBE,CAAK,EACrBA,CACX,CACA,CAEA,GAAI,CAACH,EAAK,CAKR,IAAII,EAAO,IAAI,MAAM,EAAE,EACvBJ,EAAM,UAAW,CACf,QAASK,EAAI,EAAGC,EAAGD,EAAI,GAAIA,KACpBA,EAAI,KAAU,IAAGC,EAAI,KAAK,OAAQ,EAAG,YAC1CF,EAAKC,GAAKC,MAAQD,EAAI,IAAS,GAAK,IAGtC,OAAOD,CACX,CACA,CAEA,IAAAG,EAAiBP,EC5BbQ,EAAY,CAAA,EAChB,QAASH,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACzBG,EAAUH,IAAMA,EAAI,KAAO,SAAS,EAAE,EAAE,OAAO,CAAC,EAGlD,SAASI,EAAYC,EAAKC,EAAQ,CAChC,IAAIN,EAAIM,GAAU,EACdC,EAAMJ,EACV,OAAOI,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MACvBO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MAAQ,IAChCO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MAAQ,IAChCO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MAAQ,IAChCO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MAAQ,IAChCO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MACxBO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,MACxBO,EAAIF,EAAIL,MAAQO,EAAIF,EAAIL,KAClC,CAEA,IAAAQ,EAAiBJ,ECtBbT,EAAMc,EACNL,EAAcM,EAElB,SAASC,EAAGC,EAASP,EAAKC,EAAQ,CAChC,IAAIN,EAAIK,GAAOC,GAAU,EAErB,OAAOM,GAAY,WACrBP,EAAMO,GAAW,SAAW,IAAI,MAAM,EAAE,EAAI,KAC5CA,EAAU,MAEZA,EAAUA,GAAW,GAErB,IAAIb,EAAOa,EAAQ,SAAWA,EAAQ,KAAOjB,KAO7C,GAJAI,EAAK,GAAMA,EAAK,GAAK,GAAQ,GAC7BA,EAAK,GAAMA,EAAK,GAAK,GAAQ,IAGzBM,EACF,QAASQ,EAAK,EAAGA,EAAK,GAAI,EAAEA,EAC1BR,EAAIL,EAAIa,GAAMd,EAAKc,GAIvB,OAAOR,GAAOD,EAAYL,CAAI,CAChC,CAEA,IAAAe,EAAiBH"}